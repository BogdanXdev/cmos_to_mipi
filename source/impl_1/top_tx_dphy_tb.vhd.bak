library ieee;
use ieee.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_tx_dphy_tb is
end entity top_tx_dphy_tb;

architecture sim of top_tx_dphy_tb is

    signal resetn_tb : std_logic := '1';
    signal ref_px_clk_tb : std_logic := '0';

    signal cmos_px_data_tb : std_logic_vector(7 downto 0);
    signal fv_tb : std_logic;
    signal lv_tb : std_logic;
    signal dvalid_tb : std_logic;

    signal clk_p_tb : std_logic;
    signal clk_n_tb : std_logic;
    signal mipi_d_p_tb : std_logic;
    signal mipi_d_n_tb : std_logic;

    constant half_period : natural := 24; -- in ns
    constant test_period : natural := 200; -- 1 cycle period
    constant inputs_amount : natural := 9;
    signal template_index : natural range 0 to inputs_amount - 1; -- flag to communic with response analyzer

    type test_data_type is record
        stimulus : std_logic_vector(7 downto 0);
        response : std_logic_vector(7 downto 0);
    end record;

    type template_type is array (0 to inputs_amount - 1) of test_data_type;
    constant template : template_type := (
        ("11110000", "11110000"), ("11000011", "11000011"), ("01100110", "01100110"),
        ("00001111", "00001111"), ("00111100", "00111100"), ("10011001", "10011001"), 
        ("01010101", "01010101"), ("11111111", "11111111"), ("00000000", "00000000")
    );

begin

    ref_px_clk_tb <= not ref_px_clk_tb after half_period * 1 ns;

    reset_gen : process
    begin
        resetn_tb <= '0';
        wait for half_period * 2 * 15 ns;
        resetn_tb <= '1';
        wait;
    end process reset_gen;

    stimulus_generator: process
    begin
        for i in template'range loop 
            template_index <= i;     -- flag for response analyzer 
            cmos_px_data_tb <= template(i).stimulus;
            wait for test_period ns;
        end loop;
        report "End of sim, no errors";
    end process stimulus_generator;

    dut : entity work.top_tx_dphy
        port map(
            resetn_i => resetn_tb,
            ref_px_clk_i => ref_px_clk_tb,

            cmos_px_data_i => cmos_px_data_tb,
            fv_i => fv_tb,
            lv_i => lv_tb,
            dvalid_i => dvalid_tb,

            clk_p_o => clk_p_tb,
            clk_n_o => clk_n_tb,
            mipi_d_p_o => mipi_d_p_tb,
            mipi_d_n_o => mipi_d_n_tb
        );

    -- gsr_inst : GSR
    -- generic map(
    --     SYNCMODE =>
    -- )
    -- port map(
    --     GSR_N = >, -- I
    --     CLK => -- I
    -- );

end architecture sim;